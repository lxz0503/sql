SQL 语句	语法   最基本最常用的
#AND / OR	
SELECT column_name(s)
FROM table_name
WHERE condition
AND|OR condition

#ALTER TABLE	
ALTER TABLE table_name 
ADD column_name datatype         #新增加一列
or
ALTER TABLE table_name 
DROP COLUMN column_name          #删除一列
## 举例
ALTER TABLE apps
ADD birth_date date;      #类型是date

UPDATE apps              #更新某条记录中的某一列
SET birth_date=Now()     #默认只返回当前日期
WHERE app_name='wechat APP';    字符串加单引号，int类型不用加 例如 where id=2

#查看当前时间
select Now();
select curdate();
select curtime();


#AS (alias)	
SELECT column_name AS column_alias
FROM table_name
or
SELECT column_name
FROM table_name AS table_alias

#BETWEEN	
SELECT column_name(s)
FROM table_name
WHERE column_name
BETWEEN value1 AND value2

#CREATE DATABASE	
CREATE DATABASE database_name
CREATE TABLE	CREATE TABLE table_name
(
column_name1 data_type,
column_name2 data_type,
column_name2 data_type,
...
)
#CREATE INDEX	
CREATE INDEX index_name
ON table_name (column_name)
or
CREATE UNIQUE INDEX index_name
ON table_name (column_name)

#CREATE VIEW	
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition

#DELETE	
DELETE FROM table_name
WHERE some_column=some_value
or
DELETE FROM table_name 
(Note: Deletes the entire table!!)

DELETE * FROM table_name 
(Note: Deletes the entire table!!)

#DROP DATABASE	
DROP DATABASE database_name
#DROP INDEX	
DROP INDEX table_name.index_name (SQL Server)
DROP INDEX index_name ON table_name (MS Access)
DROP INDEX index_name (DB2/Oracle)
ALTER TABLE table_name
DROP INDEX index_name (MySQL)
DROP TABLE	DROP TABLE table_name

#GROUP BY	
SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name

#HAVING	
SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name
HAVING aggregate_function(column_name) operator value
IN	SELECT column_name(s)
FROM table_name
WHERE column_name
IN (value1,value2,..)

#INSERT INTO	
INSERT INTO table_name
VALUES (value1, value2, value3,....)      # 必须和列名一一对应
or
INSERT INTO table_name
(column1, column2, column3,...)       # 可以插入指定列
VALUES (value1, value2, value3,....)

#INNER JOIN	
SELECT column_name(s)
FROM table_name1
INNER JOIN table_name2 
ON table_name1.column_name=table_name2.column_name

#LEFT JOIN	
SELECT column_name(s)
FROM table_name1
LEFT JOIN table_name2 
ON table_name1.column_name=table_name2.column_name

#RIGHT JOIN	
SELECT column_name(s)
FROM table_name1
RIGHT JOIN table_name2 
ON table_name1.column_name=table_name2.column_name

#FULL JOIN	
SELECT column_name(s)
FROM table_name1
FULL JOIN table_name2 
ON table_name1.column_name=table_name2.column_name

#LIKE	
SELECT column_name(s)
FROM table_name
WHERE column_name LIKE pattern

#ORDER BY	
SELECT column_name(s)
FROM table_name
ORDER BY column_name [ASC|DESC]

#SELECT	
SELECT column_name(s)
FROM table_name

#SELECT *	
SELECT *
FROM table_name

#SELECT DISTINCT	  用于返回唯一不同的值,refer to my picture
SELECT DISTINCT column_name(s)
FROM table_name

#SELECT INTO	
SELECT *
INTO new_table_name [IN externaldatabase]
FROM old_table_name
or
SELECT column_name(s)
INTO new_table_name [IN externaldatabase]
FROM old_table_name

#SELECT TOP
SELECT TOP number|percent column_name(s)
FROM table_name

#TRUNCATE TABLE	
TRUNCATE TABLE table_name

#UNION	
SELECT column_name(s) FROM table_name1
UNION
SELECT column_name(s) FROM table_name2

#UNION ALL	
SELECT column_name(s) FROM table_name1
UNION ALL
SELECT column_name(s) FROM table_name2

#UPDATE	
UPDATE table_name
SET column1=value, column2=value,...

#WHERE 
some_column=some_value
WHERE	SELECT column_name(s)
FROM table_name
WHERE column_name operator value

# source 命令导入数据库需要先登录到数库终端：

mysql> create database runoob;      # 创建数据库
mysql> use runoob;                  # 使用已创建的数据库 
mysql> set names utf8;           # 设置编码
mysql> 
source D:\xiaozhan_git\study_20190608\Mysql5.7.27\websites.sql  

source D:\xiaozhan_git\study_20190608\Mysql5.7.27\apps.sql 

source D:\xiaozhan_git\study_20190608\Mysql5.7.27\access_log.sql

# 单引号，反引号在数据库中的应用
字符串用单引号 ’ 可提高性能

表名、字段、数据库名等标识符可用反引号 ` 。
标识符也可以不使用反引号，但如果标识符包含特殊字符或保留字，则必须使用。

标识符包括：数据库、表、索引、列、别名、视图、存储过程、分区、表空间、其他对象名称

# 插入数据
use runoob;      --选择数据库
show tables;    ---查看此数据库里的所有表
select * from apps;   -----查看apps这个表里面的内容
insert into `apps` values('4','wechat APP', 'http://weixin.com/', 'CN');   --注意反引号的使用
或者用下面的语句, 注意，每一行后面都有个换行符，sql语句用分号表示结束
我们并没有提供 id字段 的数据，因为该字段我们在创建表的时候已经设置它为 AUTO_INCREMENT(自动增加) 属性。
 所以，该字段会自动递增而不需要我们去设置
insert into `apps`                 ---有反引号
(app_name,url,country)            ----columns的名字
values              
('wechat APP', 'http://weixin.com/', 'CN');   单引号扩起字符串，以分号结束

# 创建表时候指定时间的一些操作   datetime类型对应着可以用NOW()
CREATE TABLE Orders
(
OrderId int NOT NULL,
ProductName varchar(50) NOT NULL,
OrderDate datetime NOT NULL DEFAULT NOW(),   此处用了NOW()
PRIMARY KEY (OrderId)
)ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8;

插入数据也用了NOW()日期函数
INSERT INTO `orders` VALUES ('1', 'Google', NOW()), ('2', '淘宝', NOW());

查询日期的格式
select * from orders;          格式 ：2019-08-10  17:51:30

UPDATE orders
SET orderdate=curdate();       时间格式变为：2019-08-10  00:00:00

#另外一种时间格式,一般下面的就够了
CREATE TABLE Orders         date类型，不能指定default
(
OrderId int NOT NULL,
ProductName varchar(50) NOT NULL,
OrderDate date NOT NULL,          此处用date类型，不指定具体时间格式
PRIMARY KEY (OrderId)
)ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8;

INSERT INTO `orders` VALUES ('1', 'Google', NOW()), ('2', '淘宝', NOW());

select * from orders;         2019-08-10

UPDATE orders
SET orderdate=curtime();       2019-08-10

# AVG()函数求某一列数据的平均值
select avg(alexa) as average_value from websites;

#count()统计某一列数据出现的次数
select count(country) as country_number from websites
where country='CN';

# https://blog.csdn.net/u010339879/article/details/81623833    
https://www.cnblogs.com/zeke-python-road/p/8986318.html    --excel

经常用到在数据库中查询中间几条数据的需求

比如下面的sql语句：

① selete * from testtable limit 2,1;

② selete * from testtable limit 2 offset 1;

注意：

1.数据库数据计算是从0开始的

2.offset X是跳过X个数据，limit Y是选取Y个数据

3.limit  X,Y  中X表示跳过X个数据，读取Y个数据

这两个都是能完成需要，但是他们之间是有区别的：

①是从数据库中第三条开始查询，取一条数据，即第三条数据读取，一二条跳过

②是从数据库中的第二条数据开始查询两条数据，即第二条和第三条。
=========================
当要在workbench 里面执行脚本的时候，先双击你要选择的数据库名字，然后在右边的窗口才能执行脚本



